name: mailer cd
on:
  # this action will only run on each push to main, if you prefer continuous deployment
  push:
    branches: ["main"]
  # this action will only run if you create a release, if you prefer continuous delivery
  release:
    types: [created]

jobs:
  build-publish-deploy:
    name: Build, Publish, And Deploy To Cloud Run
    runs-on: ubuntu-latest
    environment: live
    steps:
      - name: Checkout
        uses: actions/checkout@master

      # Build and publish the Docker image to the GCP Artifact Registry
      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.CLOUDRUN_SERVICE_REGION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.CLOUD_RUN_DEPLOYER_SA_KEY }}
      - name: copying msmtprc
        working-directory: ./service
        run: echo "${{ secrets.MSMTPRC }}" > msmtprc
      - id: docker-push-tagged
        name: Tag Docker image and push to Google Artifact Registry
        uses: docker/build-push-action@v3
        with:
          file: ./service/prod.Dockerfile
          context: ./service
          push: true
          tags: |
            ${{ secrets.GCP_ARTIFACT_REPO }}/mailer:${{ github.sha }}

      # Setup gcloud CLI
      - id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.CLOUD_RUN_DEPLOYER_SA_KEY }}"

      # not passing `-allow-unauthenticated` flag here because it is recommended to not let the CD pipeline take the responsibility of setting up authentication
      - id: "deploy"
        uses: "google-github-actions/deploy-cloudrun@v1"
        with:
          service: "${{ secrets.CLOUDRUN_SERVICE }}"
          image: "${{ secrets.GCP_ARTIFACT_REPO }}/mailer:${{ github.sha }}"
          env_vars: |
            NODE_ENV=production
            PIPS_OWNER_EMAIL=${{ secrets.PIPS_OWNER_EMAIL }}
            PIPS_TOKEN=${{ secrets.PIPS_TOKEN }}
            SUPABASE_POSTGRES_ROOT_CERT_FILE_NAME=${{ secrets.SUPABASE_POSTGRES_ROOT_CERT_FILE_NAME }}
            PGHOST=${{ secrets.PGHOST }}
            PGPASSWORD=${{ secrets.PGPASSWORD }}
            PGPORT=${{ secrets.PGPORT }}
            PGSSLMODE=require
            PGUSER=${{ secrets.PGUSER }}
            PGDATABASE=${{ secrets.PGDATABASE }}
          flags: "--port=${{ secrets.CLOUDRUN_SERVICE_PORT }}"
          region: "${{ secrets.CLOUDRUN_SERVICE_REGION }}"
          secrets: ${{ secrets.SUPABASE_POSTGRES_ROOT_CERT_FILE_NAME }}=SUPABASE_POSTGRES_ROOT_CERT:latest

      - name: "deploy output"
        run: 'curl "${{ steps.deploy.outputs.url }}"'
